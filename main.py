import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import TOKEN, ADMIN_ID
from db import create_table, add_user, exists, get_users, get_stat
from tovar import create_table_order, add_order,exist_order,delete_order, create_stock, add_stock, exist_stock, delete_stock, get_order_name, get_stock_name,get_order_photo,get_stock_photo,update_stock,update_order

logging.basicConfig(level=logging.INFO)

create_table()
create_table_order()
create_stock()

bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class Form(StatesGroup):
    buy = State()
    vib = State()
    name = State()
    cost = State()
    photo = State()
    userbuy = State()
    buyintophoto = State()
    photosearch = State()
    broadcast = State()

class UpdateDel(StatesGroup):
    vib = State()
    name = State()
    cost = State()
    photo = State()
    upd = State()
    delete = State()
    delete2 = State()

user_kb = types.InlineKeyboardMarkup(row_width=2)
user_kb.add(
    types.InlineKeyboardButton(text='üõç –¢–æ–≤–∞—Ä—ã', callback_data='buy'),
    types.InlineKeyboardButton(text='üì∏ –§–æ—Ç–æ–ø–æ–∏—Å–∫', callback_data='search'),
    types.InlineKeyboardButton(text='üì¢ –ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã', callback_data='telegram_chanel'),
    types.InlineKeyboardButton(text='‚ùì –ü–æ–º–æ—â—å', callback_data='help')
)

vib = types.InlineKeyboardMarkup(row_width=2)
vib.add(
    types.InlineKeyboardButton(text='‚úÖ –í –Ω–∞–ª–∏—á–∏–∏', callback_data='stock'),
    types.InlineKeyboardButton(text='üì¶ –ü–æ–¥ –∑–∞–∫–∞–∑', callback_data='order'),
    types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='exit')
)

est = types.InlineKeyboardMarkup(row_width=1)
est.add(
    types.InlineKeyboardButton(text='üéí –°—É–º–∫–∞ arcteryx', callback_data='–°—É–º–∫–∞ arcteryx'),
    types.InlineKeyboardButton(text='üß¢ –®–∞–ø–∫–∞ oakley', callback_data='–®–∞–ø–∫–∞ oakley'),
    types.InlineKeyboardButton(text='üëï –§—É—Ç–±–æ–ª–∫–∞ UTOPIA TRAVIS', callback_data='–§—É—Ç–±–æ–ª–∫–∞ UTOPIA TRAVIS'),
    types.InlineKeyboardButton(text='üß£ –®–∞—Ä—Ñ –ì–û–®–ê –†–£–ë–ß–ò–ù–°–ö–ò–ô', callback_data='–®–∞—Ä—Ñ –ì–û–®–ê –†–£–ë–ß–ò–ù–°–ö–ò–ô'),
    types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='exit')
)

order_buy = types.InlineKeyboardMarkup(row_width=1)
order_buy.add(
    types.InlineKeyboardButton(text='üëï –§—É—Ç–±–æ–ª–∫–∞ Lonsdale', callback_data='–§—É—Ç–±–æ–ª–∫–∞ Lonsdale'),
    types.InlineKeyboardButton(text='ü•ã –§—É—Ç–±–æ–ª–∫–∞ Manto', callback_data='–§—É—Ç–±–æ–ª–∫–∞ Manto'),
    types.InlineKeyboardButton(text='üß• –§—É—Ç–±–æ–ª–∫–∞ Stone Island', callback_data='–§—É—Ç–±–æ–ª–∫–∞ Stone Island'),
    types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='exit')
)

order = ['–§—É—Ç–±–æ–ª–∫–∞ Lonsdale', '–§—É—Ç–±–æ–ª–∫–∞ Manto', '–§—É—Ç–±–æ–ª–∫–∞ Stone Island']
stock = ['–°—É–º–∫–∞ arcteryx', '–®–∞–ø–∫–∞ oakley', '–§—É—Ç–±–æ–ª–∫–∞ UTOPIA TRAVIS', '–®–∞—Ä—Ñ –ì–û–®–ê –†–£–ë–ß–ò–ù–°–ö–ò–ô']
upd_list = order+stock
@dp.callback_query_handler(lambda call: call.data == 'exit', state='*')
async def exit(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.delete()
    await call.message.answer('–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ iypka_shop. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é', reply_markup=user_kb)
    await state.finish()

stock_list = ['–°—É–º–∫–∞ arcteryx','–®–∞–ø–∫–∞ oakley','–§—É—Ç–±–æ–ª–∫–∞ UTOPIA TRAVIS','–®–∞—Ä—Ñ –ì–û–®–ê –†–£–ë–ß–ò–ù–°–ö–ò–ô']

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ iypka_shop. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é",reply_markup=user_kb)
    exist = exists(message.from_user.id)
    if not exist:
        add_user(message.from_user.id)

@dp.callback_query_handler(lambda call: call.data == 'help')
async def help(call: types.CallbackQuery):
    await call.answer()
    text = (
    "<b>‚ÑπÔ∏è –ü–æ–º–æ—â—å</b>\n\n"
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏! –ù–∏–∂–µ —Å–æ–±—Ä–∞–Ω—ã –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã üí¨\n\n"
    
    "<b>üì¶ –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?</b>\n"
    "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤¬ª</b>\n"
    "2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: <b>–í –Ω–∞–ª–∏—á–∏–∏</b> –∏–ª–∏ <b>–ü–æ–¥ –∑–∞–∫–∞–∑</b>\n"
    "3. –ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ\n"
    "4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞¬ª</b>, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
    "5. –ï—Å–ª–∏ –≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç ‚Äî –Ω–∞–∂–º–∏—Ç–µ <b>¬´–ö—É–ø–∏—Ç—å¬ª</b> –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É\n\n"

    "<b>‚ùó–ß—Ç–æ –∑–Ω–∞—á–∏—Ç ¬´–ü–æ–¥ –∑–∞–∫–∞–∑¬ª?</b>\n"
    "–¢–æ–≤–∞—Ä—ã <b>–ø–æ–¥ –∑–∞–∫–∞–∑</b> –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ø–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ.\n"
    "‚è≥ –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Äî <b>–¥–æ 14 –¥–Ω–µ–π</b>\n\n"

    "<b>üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã</b>\n"
    "‚Äî Kaspi\n"
    "‚Äî Halyk Bank\n"
    "(—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞)\n\n"

    "<b>üí¨ –£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b>\n"
    "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –∞–¥–º–∏–Ω—É ‚Äî <a href='https://t.me/feaagff'>@feaagff</a>\n\n"

    "<b>üìç –ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–∞–≥–∞–∑–∏–Ω?</b>\n"
    "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º <b>–æ–Ω–ª–∞–π–Ω</b>. –í–æ–∑–º–æ–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏.\n\n"

    "<b>üì∏ –ù–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä?</b>\n"
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –∑–∞–∫–∞–∑–∞—Ç—å –¥–ª—è –≤–∞—Å."
)
    ext = types.InlineKeyboardMarkup()
    ext.add(types.InlineKeyboardButton(text='‚Ü©Ô∏è –í—ã–π—Ç–∏', callback_data='exit'))
    await call.message.edit_text(text, parse_mode='html', reply_markup=ext)

@dp.callback_query_handler(lambda call: call.data == 'search')
async def photosearch(call: types.CallbackQuery):
    await call.answer()
    ext = types.InlineKeyboardMarkup()
    ext.add(types.InlineKeyboardButton(text='‚Ü©Ô∏è–í—ã–π—Ç–∏', callback_data='exit'))
    await call.message.edit_text(
        '''<b>üîç –§–æ—Ç–æ–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞</b>\n\n
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º <b>—Ñ–æ—Ç–æ</b> –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ <b>–æ–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º</b>. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã üõçÔ∏è\n
–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∞–¥–º–∏–Ω—É ‚Äî –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ üí¨\n
–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ ‚Äî –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ä–∞–∑—É: <a href='https://t.me/feaagff'>@feaagff</a>''',
        parse_mode='html',
        reply_markup=ext
    )
    await Form.photosearch.set()



@dp.callback_query_handler(lambda call: call.data == 'telegram_chanel')
async def telegram_channel(call: types.CallbackQuery):
    await call.answer()

    text = """
<b>üì¢ –ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã –≤ Telegram:</b>

üîπ <b>–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª</b> ‚Äî —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–∏–Ω–∫–∞–º–∏, –∞–∫—Ü–∏—è–º–∏ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞:
üõç –í–µ—â–∏ –≤ –Ω–∞–ª–∏—á–∏–∏ –∏ –ø–æ–¥ –∑–∞–∫–∞–∑  
üì∏ –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ç–æ–ø–æ–∏—Å–∫–∞  
üöö –î–æ—Å—Ç–∞–≤–∫–∞ –ö–∞–∑–ø–æ—á—Ç–æ–π –∏ –°–î–≠–ö  

üîπ <b>–û—Ç–∑—ã–≤—ã</b> ‚Äî —Ä–µ–∞–ª—å–Ω—ã–µ –º–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π, —Ñ–æ—Ç–æ –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞.

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å!
"""

    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª", url="https://t.me/+3b0cODqHbYBmZTYy"),
        types.InlineKeyboardButton("üí¨ –°–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", url="https://t.me/iyoka_shop_otziv"),
        types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="exit")
    )

    await call.message.edit_text(text, parse_mode='html', reply_markup=kb)

@dp.message_handler(content_types=['photo'], state=Form.photosearch)
async def photo_to_admin(message: types.Message, state: FSMContext):
    photo = message.photo[-1].file_id
    username = message.from_user.username or "–ë–µ–∑ username"

    await message.answer(
        '''‚úÖ <b>–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n
–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n
–ï—Å–ª–∏ —Å—Ä–æ—á–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é: <a href='https://t.me/feaagff'>@feaagff</a>''',
        parse_mode='html'
    )
    await bot.send_photo(
        ADMIN_ID,
        photo,
        caption=(
            f'üì© <b>–§–æ—Ç–æ–ø–æ–∏—Å–∫</b>\n'
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n'
            f'ID: {message.from_user.id}\n'
            f'–û—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞.'
        ),
        parse_mode='html'
    )
    await state.finish()
@dp.message_handler(content_types=['text'], state=Form.photosearch)
async def text_to_admin(message: types.Message, state: FSMContext):
    text = message.text
    username = message.from_user.username or "–ë–µ–∑ username"

    await message.answer(
        '''‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç.\n
–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É –Ω–∞–ø—Ä—è–º—É—é: <a href='https://t.me/feaagff'>@feaagff</a>''',
        parse_mode='html'
    )
    await bot.send_message(
        ADMIN_ID,
        f'üì© <b>–§–æ—Ç–æ–ø–æ–∏—Å–∫</b>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\nID: {message.from_user.id}\n–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞: <b>{text}</b>',
        parse_mode='html'
    )
    await state.finish()

@dp.callback_query_handler(lambda call: call.data == 'buy')
async def buy(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text(
        'üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>\n\n'
        '‚Äî <b>–í –Ω–∞–ª–∏—á–∏–∏</b> ‚Äî —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n'
        '‚Äî <b>–ü–æ–¥ –∑–∞–∫–∞–∑</b> ‚Äî —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –¥–æ—Å—Ç–∞–≤–∏–º –ø–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ',
        parse_mode='html',
        reply_markup=vib
    )
    await Form.buy.set()

order_list = ['stock', 'order']    

@dp.callback_query_handler(lambda call: call.data in order_list,state=Form.buy)
async def handle_buy_option(call: types.CallbackQuery):
    await call.answer()
    if call.data == 'stock':
        await call.message.edit_text(
            'üü¢ <b>–¢–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:',
            parse_mode='html',
            reply_markup=est
        )
        await Form.userbuy.set()
    elif call.data == 'order':
        await call.message.edit_text(
            'üõç <b>–¢–æ–≤–∞—Ä—ã –ø–æ–¥ –∑–∞–∫–∞–∑</b>\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä:',
            parse_mode='html',
            reply_markup=order_buy
        )
        await Form.userbuy.set()
    

photo = types.InlineKeyboardMarkup()
photo.add(
    types.InlineKeyboardButton(text='üì∏ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞', callback_data='photos'),
    types.InlineKeyboardButton(text='‚ùå –í—ã–π—Ç–∏', callback_data='exit')
)

@dp.callback_query_handler(lambda call: call.data in stock + order, state=Form.userbuy)
async def userbuy(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(name = call.data)
    await call.answer()
    orderexist = exist_order(call.data)
    stockexist = exist_stock(call.data)
    if orderexist:
            name, cost = get_order_name(call.data)
            await call.message.answer(
            f'üì¶ <b>{name}</b>\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{cost}—Ç–≥</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ:',
            parse_mode='html',
            reply_markup=photo
        )
    elif stockexist:
        name, cost = get_stock_name(call.data)
        await call.message.answer(
            f'üì¶ <b>{name}</b>\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{cost}—Ç–≥</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ:',
            parse_mode='html',
            reply_markup=photo
        )
    else:
        await call.message.answer(
            '‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.'
        )
        return
    
    
@dp.callback_query_handler(lambda call: call.data == 'photos', state = Form.userbuy)
async def photos(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    data = await state.get_data()
    name = data['name']
    print('üì¶ –î–∞–Ω–Ω—ã–µ –∏–∑ state:', data)
    print('üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ:')
    print('exist_stock:', exist_stock(name))
    print('exist_order:', exist_order(name))
    print('get_stock_photo:', get_stock_photo(name))
    print('get_order_photo:', get_order_photo(name))
    stock = exist_stock(name)
    in_order = exist_order(name)

    buy = types.InlineKeyboardMarkup(row_width=2)
    buy.add(
        types.InlineKeyboardButton(text='üõí –ö—É–ø–∏—Ç—å', callback_data='buyintophoto'),
        types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='exit')
    )
    if stock:
        photo = get_stock_photo(name)
        if photo:
            await bot.send_photo(
            chat_id=call.message.chat.id,
            photo=photo,
            caption=f'üì∏ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞: <b>{name}</b>',
            parse_mode='html',
            reply_markup=buy
        )
        else:
            await call.message.answer('–§–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    elif in_order:
        photo = get_order_photo(name)
        if photo:
            await bot.send_photo(
            chat_id=call.message.chat.id,
            photo=photo,
            caption=f'üì∏ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞: <b>{name}</b>',
            parse_mode='html',
            reply_markup=buy
        )
        else:
            await call.message.answer('–§–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    else:
        await call.message.answer('–§–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    

@dp.callback_query_handler(lambda call: call.data == 'buyintophoto', state=Form.userbuy)
async def buyintophoto(call: types.CallbackQuery):
    yesno = types.InlineKeyboardMarkup(row_width=2)
    yesno.add(
        types.InlineKeyboardButton(text='‚úÖ –î–∞', callback_data='yes'),
        types.InlineKeyboardButton(text='‚ùå –ù–µ—Ç', callback_data='no')
    )
    await call.answer()
    await call.message.answer(
        '‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?</b>',
        parse_mode='html',
        reply_markup=yesno
    )
@dp.callback_query_handler(lambda call: call.data in ['yes','no'], state=Form.userbuy)
async def yesorno(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data['name']
    if call.data == 'yes':
        await call.answer()
        await call.message.answer(
            f'‚úÖ–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞ <b>{name}</b> –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n'
            f'–î–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –æ–Ω –Ω–∞–ø–∏—à–µ—Ç –≤–∞–º, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ @feaagff ‚ù§Ô∏è /start',
            parse_mode='html'
        )
        await bot.send_message(
            ADMIN_ID,
            f'üì• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É</b>\n\n'
            f'üîπ –¢–æ–≤–∞—Ä: <b>{name}</b>\n'
            f'üë§ Username: @{call.from_user.username or "‚Äî"}\n'
            f'üÜî ID: {call.from_user.id}',
            parse_mode='html'
        )
        await state.finish()

    elif call.data == 'no':
        await call.answer()
        await call.message.answer(
            f'‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É <b>{name}</b> –æ—Ç–º–µ–Ω–µ–Ω–∞.',
            parse_mode='html'
        )
        await state.finish()



admin_kb = types.InlineKeyboardMarkup(row_width=1)
admin_kb.add(
    types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='add_photo'),
    types.InlineKeyboardButton(text='üì® –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', callback_data='send_message'),
    types.InlineKeyboardButton(text='‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å / ‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='update_delete'),
    types.InlineKeyboardButton(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='stat'),
    types.InlineKeyboardButton(text='‚Ü©Ô∏è –í—ã–π—Ç–∏', callback_data='exit')
)



@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",reply_markup=admin_kb)
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return

@dp.callback_query_handler(lambda call: call.data == "update_delete")
async def upddel(call: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='upd_photo'),
        types.InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='del_photo'),
        types.InlineKeyboardButton(text='‚Ü©Ô∏è –í—ã–π—Ç–∏', callback_data='exit')
    )
    await call.answer()
    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å: ', reply_markup=kb)
    
@dp.callback_query_handler(lambda call: call.data in ['upd_photo','del_photo'])
async def delupd(call: types.CallbackQuery):
    if call.data == 'upd_photo':
        await call.answer()
        await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å', reply_markup=vib)
        await UpdateDel.upd.set()
    elif call.data == 'del_photo':
        await call.answer()
        await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', reply_markup=vib)
        await UpdateDel.delete.set()
    else:
        await call.answer()
        await call.message.answer('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å')
        return


@dp.callback_query_handler(state=UpdateDel.delete)
async def vib3(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    if call.data == 'stock':
        await call.message.edit_text('–í –Ω–∞–ª–∏—á–∏–∏', reply_markup=est)
        await state.finish()
        await UpdateDel.delete2.set()
    elif call.data == 'order':
        await call.message.edit_text('–ü–æ–¥ –∑–∞–∫–∞–∑', reply_markup=order_buy)
        await UpdateDel.delete2.set()

@dp.callback_query_handler(lambda call: call.data in order + stock, state=UpdateDel.delete2)
async def vib2(call: types.CallbackQuery, state: FSMContext):
    yesno_kb = types.InlineKeyboardMarkup(row_width=2)
    yesno_kb.add(
    types.InlineKeyboardButton(text='‚úÖ –î–∞', callback_data='yes'),
    types.InlineKeyboardButton(text='‚ùå –ù–µ—Ç', callback_data='no')
)
    await call.answer()
    await state.update_data(name = call.data)
    data = await state.get_data()
    name = data['name']
    await call.message.answer(f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?{name}', reply_markup=yesno_kb)

@dp.callback_query_handler(lambda call: call.data in ['yes','no'],state=UpdateDel.delete2)
async def delete2(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data['name']
    order = exist_order(name)
    stock = exist_stock(name)
    if call.data == 'yes':
        await call.answer()
        if stock:
            delete_stock(name)
            await call.message.edit_text('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
        elif order:
            delete_order(name)
            await call.message.edit_text('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
        else:
            await call.message.edit_text('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    elif call.data == 'no':
        await call.answer()
        await call.message.edit_text('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
        return
    await state.finish()

@dp.callback_query_handler(state=UpdateDel.upd)
async def vib3(call: types.CallbackQuery):
    await call.answer()
    if call.data == 'stock':
        await call.message.edit_text('–í –Ω–∞–ª–∏—á–∏–∏', reply_markup=est)
        await UpdateDel.name.set()
    elif call.data == 'order':
        await call.message.edit_text('–ü–æ–¥ –∑–∞–∫–∞–∑', reply_markup=order_buy)
        await UpdateDel.name.set()

@dp.callback_query_handler(state=UpdateDel.name)
async def vib4(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(name = call.data)
    await call.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {call.data}')
    await UpdateDel.cost.set()

@dp.message_handler(state=UpdateDel.cost)
async def vib5(message: types.Message, state: FSMContext):
    await state.update_data(cost = message.text)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞')
    await UpdateDel.photo.set()

@dp.message_handler(content_types=['photo'], state=UpdateDel.photo)
async def vib6(message: types.Message, state: FSMContext):
    photo = message.photo[-1].file_id
    data = await state.get_data()
    name = data['name']
    cost = data['cost']
    order = exist_order(name)
    stock = exist_stock(name)
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞:")
    print("name:", name)
    print("exist_order:", exist_order(name))
    print("exist_stock:", exist_stock(name))

    if order:
        update_order(cost,photo,name)
        await message.answer(f'‚úÖ –¢–æ–≤–∞—Ä <b>{name}</b> –æ–±–Ω–æ–≤–ª–µ–Ω.\n–¢–µ–ø–µ—Ä—å –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{cost}—Ç–≥</b>', parse_mode='html')
        await state.finish()
    elif stock:
        update_stock(cost,photo,name)
        await message.answer(f'‚úÖ –¢–æ–≤–∞—Ä <b>{name}</b> –æ–±–Ω–æ–≤–ª–µ–Ω.\n–¢–µ–ø–µ—Ä—å –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{cost}—Ç–≥</b>', parse_mode='html')
        await state.finish()
    else:
        await message.answer(f'‚ùå –¢–æ–≤–∞—Ä <b>{name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.', parse_mode='html')
        await state.finish()




@dp.callback_query_handler(lambda call: call.data == 'add_photo')
async def add_photo(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', reply_markup=vib)
    await Form.vib.set()

@dp.callback_query_handler(lambda call: call.data in ['stock','order'],state=Form.vib)
async def vib2(call: types.CallbackQuery):
    await call.answer()
    if call.data == 'stock':
        await call.message.edit_text('–í –Ω–∞–ª–∏—á–∏–∏', reply_markup=est)
        await Form.buy.set()
    elif call.data == 'order':
        await call.message.edit_text('–ü–æ–¥ –∑–∞–∫–∞–∑', reply_markup=order_buy)
        await Form.buy.set()
    

@dp.callback_query_handler(state=Form.buy)
async def getname(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(name=call.data)
    await call.message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ç–æ–≤–∞—Ä–∞: <b>{call.data}</b>', parse_mode='html')
    await Form.cost.set()

@dp.message_handler(state=Form.cost)
async def getcost(message: types.Message, state: FSMContext):
    await state.update_data(cost=message.text)
    await message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞')
    await Form.photo.set()

@dp.message_handler(content_types=['photo'], state=Form.photo)
async def getphoto(message: types.Message, state: FSMContext):
    photo = message.photo[-1].file_id
    data = await state.get_data()
    name = data['name']
    cost = data['cost']
    
    orderresult = exist_order(name)
    stockresult = exist_stock(name)
    if orderresult:
        await message.answer('–í–∞—à —Ç–æ–≤–∞—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ë–î –∑–∞–∫–∞–∑–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–ª–∫–∞–¥–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞')
    elif stockresult:
         await message.answer('–í–∞—à —Ç–æ–≤–∞—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ë–î –Ω–∞–ª–∏—á–∏—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–ª–∫–∞–¥–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞')
    else:
        if name in order:
            add_order(name, cost, photo)
            await message.answer(f'–¢–æ–≤–∞—Ä <b>{name}</b> —Å—Ç–æ–∏–º–æ—Å—Ç—å—é <b>{cost}</b> - –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î –∑–∞–∫–∞–∑–∞', parse_mode='html')
        elif name in stock:
            add_stock(name,cost,photo)
            await message.answer(f'–¢–æ–≤–∞—Ä <b>{name}</b> —Å—Ç–æ–∏–º–æ—Å—Ç—å—é <b>{cost}</b> - –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î –Ω–∞–ª–∏—á–∏—è', parse_mode='html')
    await state.finish()

@dp.callback_query_handler(lambda call: call.data == 'send_message')
async def broadcast(call: types.CallbackQuery):
    await call.answer()
    await call.message.answer('üì® –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: ')
    await Form.broadcast.set()

@dp.message_handler(state=Form.broadcast)
async def send_message(message: types.Message, state: FSMContext):
    users = get_users()
    text = message.text 
    success = 0
    failed = 0
    for user in users:
        try:
            await bot.send_message(user, text)
            success += 1
            await state.finish()
        except:
            failed += 1
            await state.finish()
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
        f"üë• –ü–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: <b>{success}</b>\n"
        f"‚ö†Ô∏è –û—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: <b>{failed}</b>",
        parse_mode='html'
    )

@dp.callback_query_handler(lambda call: call.data == 'stat')
async def stat(call: types.CallbackQuery):
    await call.answer()
    users = get_stat()
    if not users:
        await call.message.answer('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ.')
        return
    for user in users:
      await call.message.answer(f'üÜî: {user[0]}')

@dp.message_handler()
async def echo(message: types.Message):
    await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ",reply_markup=user_kb)

    


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates = True)
